name: Build Multi-Platform Executables and Release

on:
  push:
    tags:
      - 'v*.*.*'

permissions:
  contents: write

jobs:
  build-windows-exe:
    name: Build Windows EXE
    runs-on: windows-latest
    outputs:
      artifact_download_name: audio-aligner-win-${{ github.ref_name }}
      asset_upload_name: audio-aligner-${{ github.ref_name }}.exe
      original_asset_filename: audio-aligner.exe
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: '3.13'

    - name: Install dependencies
      run: |
        python -m venv venv
        .\venv\Scripts\activate
        pip install -e .
        pip install pyinstaller

    - name: Build Windows EXE
      run: |
        .\venv\Scripts\activate
        pyinstaller --onefile --name "audio-aligner" audio_aligner/main.py

    - name: Upload Windows EXE artifact
      uses: actions/upload-artifact@v4
      with:
        name: audio-aligner-win-${{ github.ref_name }}
        path: dist/audio-aligner.exe

  build-linux-executable:
    name: Build Linux Executable
    runs-on: ubuntu-latest
    outputs:
      artifact_download_name: audio-aligner-linux-${{ github.ref_name }}
      asset_upload_name: audio-aligner-${{ github.ref_name }}
      original_asset_filename: audio-aligner
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: '3.13'

    - name: Install dependencies
      run: |
        python -m venv venv
        source venv/bin/activate
        pip install -e .
        pip install pyinstaller

    - name: Build Linux Executable
      run: |
        source venv/bin/activate
        pyinstaller --onefile --name "audio-aligner" audio_aligner/main.py

    - name: Upload Linux Executable artifact
      uses: actions/upload-artifact@v4
      with:
        name: audio-aligner-linux-${{ github.ref_name }}
        path: dist/audio-aligner

  create-github-release:
    name: Create GitHub Release
    runs-on: ubuntu-latest
    needs: [build-windows-exe, build-linux-executable]
    steps:
    - name: Create GitHub Release
      id: create_release
      uses: actions/create-release@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        tag_name: ${{ github.ref_name }}
        release_name: Release ${{ github.ref_name }}
        body: |
          Automated release for ${{ github.ref_name }}
        draft: false
        prerelease: false

    - name: Download Windows EXE artifact
      uses: actions/download-artifact@v4
      with:
        name: ${{ needs.build-windows-exe.outputs.artifact_download_name }}
        path: ./release-assets/windows/

    - name: Download Linux Executable artifact
      uses: actions/download-artifact@v4
      with:
        name: ${{ needs.build-linux-executable.outputs.artifact_download_name }}
        path: ./release-assets/linux/

    - name: Upload Windows EXE to Release
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ steps.create_release.outputs.upload_url }}
        asset_path: ./release-assets/windows/${{ needs.build-windows-exe.outputs.original_asset_filename }}
        asset_name: ${{ needs.build-windows-exe.outputs.asset_upload_name }}
        asset_content_type: application/octet-stream

    - name: Upload Linux Executable to Release
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ steps.create_release.outputs.upload_url }}
        asset_path: ./release-assets/linux/${{ needs.build-linux-executable.outputs.original_asset_filename }}
        asset_name: ${{ needs.build-linux-executable.outputs.asset_upload_name }}
        asset_content_type: application/x-executable
